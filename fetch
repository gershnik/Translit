#! /usr/bin/env -S python3 -u

# Copyright (c) 2023, Eugene Gershnik
# SPDX-License-Identifier: GPL-3.0-or-later

import sys
import shutil
import subprocess
from pathlib import Path
from urllib.request import urlretrieve

components = {
    'objc-helpers': {
        'ver': '3.1',
        'url': 'https://github.com/gershnik/objc-helpers/releases/download/v{ver}/objc-helpers-{ver}.tar.gz',
        'unpacker': {
            'type': 'tar'
        },
        'dir': 'objc-helpers',
        'verFile': 'VERSION',
        'generateVerFile': True
    }
}


mydir = Path(sys.argv[0]).parent
externalDir = mydir / 'External'

externalDir.mkdir(parents=True, exist_ok=True)

def verToList(ver):
    return [int(i) for i in ver.split('.')]
    
def getVersionFromFile(path):
    existingVer = None
    if path.is_file():
        existingVer = verToList(path.read_text().rstrip())
    return existingVer

def checkUpToDate(name, component):
    directory = externalDir / component['dir']
    upToDate = False
    
    if component.get('verFile'):
        verFile = directory / component['verFile']
        requiredVer = verToList(component['ver'])
        existingVer = getVersionFromFile(verFile)
        if existingVer == requiredVer:
            upToDate = True
    else:
        print(f"Dont know how to detect version of {name}", file=sys.stderr)
        sys.exit(1)
        
    if not upToDate:
        print(f'{name} not up to date, required {requiredVer}, existing {existingVer}')
    else:
        print(f'{name} is up to date')
    return upToDate
    
def untar(name, component, archive):
    directory = externalDir / component['dir']
    if archive.suffix in ('.tgz', '.gz'):
        comp = 'z'
    elif archive.suffix in ('.tbz', '.bz'):
        comp = 'j'
    else:
        comp = ''
    
    command = ['/usr/bin/tar', '-C', directory, f'-x{comp}f', archive]
    subst = component['unpacker'].get('subst')
    if not subst is None:
        command += ['-s', subst]
    subprocess.run(command, check=True)

def fetchUrl(name, component, unpacker):
    directory = externalDir / component['dir']
    
    shutil.rmtree(directory, ignore_errors=True)
    if directory.exists():
        print(f'Unable to remove {name} directory', file=sys.stderr);
        sys.exit(1)
    directory.mkdir()
    url = component['url'].format(ver = component['ver'])
    path, headers = urlretrieve(url)
    try:
        unpacker(name, component, Path(path))
        print(f'Installed {name}')
    finally:
        Path(path).unlink()
    generateVerFile = component.get('generateVerFile', False)
    if generateVerFile:
        verFile = directory / component['verFile']
        verFile.write_text(component['ver'])


def getFetcher(name, component):
    if component.get('url'):
        return fetchUrl
    else:
        print(f"Dont know how to download {name}", file=sys.stderr)
        sys.exit(1)
        
def getUnpacker(name, component):
    type = component['unpacker']['type']
    if type == 'tar':
        return untar
    else:
        print(f"Dont know how to unpack {name}", file=sys.stderr)
        sys.exit(1)

localXcconfig = mydir / 'Local.xcconfig'

if not localXcconfig.exists():
    localXcconfig.write_text('''
// Local configuration settings. Do not commit to source control
//
// Configuration settings file format documentation can be found at:
// https://help.apple.com/xcode/#/dev745c5c974
//
// To create signed and notarized installer from Xcode do this:
//TRANSLIT_SIGN_PACKAGE=true
//NOTARIZE_USER=...
//NOTARIZE_PWD=...
//CODE_SIGN_INJECT_BASE_ENTITLEMENTS=NO
'''.lstrip())

for name, component in components.items():
    if checkUpToDate(name, component):
        continue
    fetcher = getFetcher(name, component)
    unpacker = getUnpacker(name, component)
    fetcher(name, component, unpacker)
